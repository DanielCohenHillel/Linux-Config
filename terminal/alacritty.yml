# ~/.config/alacritty

# Configuration for Alacritty, the GPU enhanced terminal emulator.
env:
  # TERM variable
  TERM: alacritty

window:
  # Window dimensions (changes require restart)
  dimensions:
    columns: 120
    lines: 35

  # Window position (changes require restart)
  # position:
  #   x: 0
  #   y: 0

  # Window padding (changes require restart)
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations (None\Full)
  decorations: none

  # Startup Mode (Windowed\Maximized\Fullscreen)
  startup_mode: Windowed

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

scrolling:
  # Maximum number of lines in the scrollback buffer.
  history: 10000
  # Scrolling distance multiplier.
  multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    # Default: (macOS) Menlo/(Linux) monospace/(Windows) Consolas
    family: Source Code Pro
    style: Regular

  # Bold font face
  bold:
    # Font family
    family: Source Code Pro
    style: Bold

  # Italic font face
  italic:
    # Font family
    family: Source Code Pro
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    family: Source Code Pro 
    style: Bold Italic

  # Point size
  size: 11.0

  # Offset is the extra space around each character
  offset:
    x: 0  # Letter spacing
    y: 0  # Line Spacing

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: -1

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

colors:
  # Default colors
  primary:
    background: '0x1e2127'
    foreground: '0xabb2bf'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    bright_foreground: '0xe6efff'

  # Cursor colors
  cursor:
    text: '0x000000'
    cursor: '0xffffff'

  # Normal colors
  normal:
    black:   '0x1e2127'
    red:     '0xe06c75'
    green:   '0x98c379'
    yellow:  '0xd19a66'
    blue:    '0x61afef'
    magenta: '0xc678dd'
    cyan:    '0x56b6c2'
    white:   '0x828791'

  # Bright colors
  bright:
    black:   '0x5c6370'
    red:     '0xe06c75'
    green:   '0x98c379'
    yellow:  '0xd19a66'
    blue:    '0x61afef'
    magenta: '0xc678dd'
    cyan:    '0x56b6c2'
    white:   '0xe6efff'

  # Dim colors
  dim:
    black:   '0x1e2127'
    red:     '0xe06c75'
    green:   '0x98c379'
    yellow:  '0xd19a66'
    blue:    '0x61afef'
    magenta: '0xc678dd'
    cyan:    '0x56b6c2'
    white:   '0x828791'

  # Indexed Colors
  #indexed_colors:
  #  - { index: 16, color: '0x000000' }

# Visual Bell (can check online)
visual_bell:
  animation: EaseOutExpo
  duration: 1
  color: '#ffffff'

# Background opacity
background_opacity: 0.9

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
dynamic_title: true

cursor:
  # Cursor style
  style: Block
  # Vi mode cursor style
  vi_mode_style: None
  # The cursor will be rendered as a hollow box when the window is not focused.
  unfocused_hollow: true
  # Thickness of the cursor relative to the cell width as floating point number
  thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

mouse:
  # Click settings
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  # url:
    # URL launcher
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
  # - ToggleViMode
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # - { key: Paste,                                action: Paste          }
  # - { key: Copy,                                 action: Copy           }
  # - { key: L,         mods: Control,             action: ClearLogNotice }
  # - { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  # - { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  # - { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  # - { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  # - { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

   # Vi Mode
  # - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  # - { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  # - { key: Escape,                      mode: Vi, action: ClearSelection          }
  # - { key: I,                           mode: Vi, action: ScrollToBottom          }
  # - { key: I,                           mode: Vi, action: ToggleViMode            }
  # - { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  # - { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  # - { key: G,                           mode: Vi, action: ScrollToTop             }
  # - { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  # - { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  # - { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  # - { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  # - { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  # - { key: Y,                           mode: Vi, action: Copy                    }
  # - { key: Y,                           mode: Vi, action: ClearSelection          }
  # - { key: Copy,                        mode: Vi, action: ClearSelection          }
  # - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  # - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  # - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  # - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  # - { key: Return,                      mode: Vi, action: Open                    }
  # - { key: K,                           mode: Vi, action: Up                      }
  # - { key: J,                           mode: Vi, action: Down                    }
  # - { key: H,                           mode: Vi, action: Left                    }
  # - { key: L,                           mode: Vi, action: Right                   }
  # - { key: Up,                          mode: Vi, action: Up                      }
  # - { key: Down,                        mode: Vi, action: Down                    }
  # - { key: Left,                        mode: Vi, action: Left                    }
  # - { key: Right,                       mode: Vi, action: Right                   }
  # - { key: Key0,                        mode: Vi, action: First                   }
  # - { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  # - { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  # - { key: H,      mods: Shift,         mode: Vi, action: High                    }
  # - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  # - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  # - { key: B,                           mode: Vi, action: SemanticLeft            }
  # - { key: W,                           mode: Vi, action: SemanticRight           }
  # - { key: E,                           mode: Vi, action: SemanticRightEnd        }
  # - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  # - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  # - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  # - { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }

   # (Windows, Linux, and BSD only)
  # - { key: V,        mods: Control|Shift,           action: Paste            }
  # - { key: C,        mods: Control|Shift,           action: Copy             }
  # - { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  # - { key: Insert,   mods: Shift,                   action: PasteSelection   }
  # - { key: Key0,     mods: Control,                 action: ResetFontSize    }
  - { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  - { key: Add,      mods: Control,                 action: IncreaseFontSize }
  - { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  - { key: Minus,    mods: Control,                 action: DecreaseFontSize }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
